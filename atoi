#include <stdio.h>
#include <stdlib.h>

int my_setenv(const char *name, const char *value) {
    if (name == NULL || value == NULL) {
        fprintf(stderr, "setenv: Invalid arguments\n");
        return -1;
    }

    // Concatenate name and value to form VARNAME=VALUE
    char *env_str;
    if (asprintf(&env_str, "%s=%s", name, value) == -1) {
        perror("setenv");
        return -1;
    }

    // Set the environment variable
    if (putenv(env_str) != 0) {
        perror("setenv");
        free(env_str);
        return -1;
    }

    return 0;
}

int my_unsetenv(const char *name) {
    if (name == NULL) {
        fprintf(stderr, "unsetenv: Invalid argument\n");
        return -1;
    }

    // Unset the environment variable
    if (unsetenv(name) != 0) {
        perror("unsetenv");
        return -1;
    }

    return 0;
}

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s COMMAND [ARGUMENTS]\n", argv[0]);
        return 1;
    }

    if (strcmp(argv[1], "setenv") == 0) {
        if (argc != 4) {
            fprintf(stderr, "Usage: %s setenv VARIABLE VALUE\n", argv[0]);
            return 1;
        }

        if (my_setenv(argv[2], argv[3]) != 0) {
            return 1;
        }
    } else if (strcmp(argv[1], "unsetenv") == 0) {
        if (argc != 3) {
            fprintf(stderr, "Usage: %s unsetenv VARIABLE\n", argv[0]);
            return 1;
        }

        if (my_unsetenv(argv[2]) != 0) {
            return 1;
        }
    } else {
        fprintf(stderr, "Unknown command: %s\n", argv[1]);
        return 1;
    }

    return 0;
}
