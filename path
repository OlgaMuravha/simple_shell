#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_PATH_LENGTH 100

int main() {
    char command[MAX_COMMAND_LENGTH];
    char path[MAX_PATH_LENGTH];


    char *env_path = getenv("PATH");
    if (env_path == NULL) {
        fprintf(stderr, "Error: PATH environment variable not set.\n");
        return 1;
    }


    while (1) {

        printf("MyShell> ");


        if (fgets(command, MAX_COMMAND_LENGTH, stdin) == NULL) {
            break;  // Exit if there's an error or EOF
        }


        command[strcspn(command, "\n")] = '\0';


        pid_t pid = fork();

        if (pid < 0) {

            perror("Fork failed");
            exit(1);
        } else if (pid == 0) {



            char *token = strtok(env_path, ":");
            while (token != NULL) {

                snprintf(path, MAX_PATH_LENGTH, "%s/%s", token, command);


                if (access(path, X_OK) == 0) {

                    execv(path, (char *[]){command, NULL});

                   perror("Execution failed");
                    exit(1);
                }


                token = strtok(NULL, ":");
            }


            fprintf(stderr, "Command not found: %s\n", command);
            exit(1);
        } else {



            int status;
            waitpid(pid, &status, 0);


            if (WIFEXITED(status) && WEXITSTATUS(status) != 0) {
                fprintf(stderr, "Child process exited with status %d\n", WEXITSTATUS(status));
            }
        }
    }

    return 0;
}
