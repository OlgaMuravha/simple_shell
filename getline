#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define BUFFER_SIZE 1024

char* my_getline(void);

int main() {
    char *input;
    
    do {
        printf("Enter a command (type 'exit' to quit): ");
        fflush(stdout);
        
        input = my_getline();
        
        if (input == NULL) {
            fprintf(stderr, "Error reading input.\n");
            exit(EXIT_FAILURE);
        }

        // Your processing logic here...
        printf("You entered: %s\n", input);

        free(input);
    } while (strcmp(input, "exit") != 0);

    printf("Exiting the shell.\n");

    return 0;
}

char* my_getline(void) {
    static char buffer[BUFFER_SIZE];
    static char *line = NULL;
    static size_t line_len = 0;

    ssize_t read_bytes;

    if (line == NULL) {
        line = buffer;
    }

    // Read input using a buffer
    read_bytes = read(STDIN_FILENO, buffer, BUFFER_SIZE);

    if (read_bytes < 0) {
        perror("read");
        return NULL;
    }

    // Null-terminate the line
    buffer[read_bytes] = '\0';

    // Check if we need to allocate more memory for the line
    if (line_len == 0) {
        line = (char *)malloc((size_t)read_bytes + 1);
    } else {
        line = (char *)realloc(line, line_len + (size_t)read_bytes + 1);
    }

    if (line == NULL) {
        fprintf(stderr, "Memory allocation error.\n");
        exit(EXIT_FAILURE);
    }

    // Copy the buffer content to the line
    strcpy(line + line_len, buffer);

    // Update the line length
    line_len += (size_t)read_bytes;

    // Check if the line is complete (contains a newline character)
    if (strchr(line, '\n') != NULL) {
        return line;
    } else {
        // Continue reading until a complete line is received
        return my_getline();
    }
}
